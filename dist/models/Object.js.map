{"version":3,"sources":["../../src/models/Object.js"],"names":["cleanUp","MAX_INSTANCES","DEFAULT_TTL","schema","mongoose","Schema","key","type","required","unique","value","ttl","Number","touchedAt","Date","default","versionKey","post","doc","constructor","pre","next","getUpdate","update","model","count","err","deleteOne","sort","exec","err2","found","console","log"],"mappings":";;;;;;QA6DgBA,O,GAAAA,O;;AA7DhB;;;;;;AAEO,IAAMC,wCAAgB,EAAtB;AACA,IAAMC,oCAAc,KAAK,IAAzB;;AAEP,IAAMC,SAAS,IAAIC,mBAASC,MAAb,CACd;AACCC,MAAK;AACJC,QAAM,QADF;AAEJC,YAAU,IAFN;AAGJC,UAAQ;AAHJ,EADN;AAMCC,QAAO;AACNH,QAAM,QADA;AAENC,YAAU;AAFJ,EANR;AAUCG,MAAK;AACJ;AACAJ,QAAMK;AAFF,EAVN;AAcCC,YAAW;AACVN,QAAMO,IADI;AAEVN,YAAU,IAFA;AAGVO,WAAS,IAAID,IAAJ;AAHC;AAdZ,CADc,EAqBd;AACCE,aAAY;AADb,CArBc,CAAf;;AA0BAb,OAAOc,IAAP,CAAY,MAAZ,EAAoB,UAASC,GAAT,EAAc;AACjClB,SAAQ,KAAKmB,WAAb;AACA,CAFD;;AAIAhB,OAAOiB,GAAP,CAAW,MAAX,EAAmB,UAASC,IAAT,EAAe;AACjC,MAAKR,SAAL,GAAiB,IAAIC,IAAJ,EAAjB;AACA,KAAI,CAAC,KAAKH,GAAV,EAAe,KAAKA,GAAL,GAAWT,WAAX;AACf,QAAOmB,MAAP;AACA,CAJD;;AAMAlB,OAAOiB,GAAP,CAAW,QAAX,EAAqB,UAASC,IAAT,EAAe;AACnC,KAAIV,MAAM,KAAKW,SAAL,GAAiBX,GAAjB,IAAwBT,WAAlC;AACA,MAAKqB,MAAL,CAAY;AACXV,aAAW,IAAIC,IAAJ,EADA;AAEXH,OAAKA;AAFM,EAAZ;AAIAU;AACA,CAPD;;kBASejB,mBAASoB,KAAT,CAAe,QAAf,EAAyBrB,MAAzB,C;;AAEf;;;;;;;;;;AASO,SAASH,OAAT,CAAiBwB,KAAjB,EAAwB;AAC9BA,OAAMC,KAAN,CAAY,UAASC,GAAT,EAAcD,KAAd,EAAqB;AAChC,MAAIA,QAAQxB,aAAZ,EAA2B;AAC1BuB,SACEG,SADF,GAEEC,IAFF,CAEO,EAAEf,WAAW,CAAb,EAFP,EAGEgB,IAHF,CAGO,UAASC,IAAT,EAAeC,KAAf,EAAsB;AAC3BC,YAAQC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACA,IALF;AAMA;AACD,EATD;AAUA","file":"Object.js","sourcesContent":["import mongoose, { Model } from 'mongoose';\n\nexport const MAX_INSTANCES = 10;\nexport const DEFAULT_TTL = 60 * 1000;\n\nconst schema = new mongoose.Schema(\n\t{\n\t\tkey: {\n\t\t\ttype: 'string',\n\t\t\trequired: true,\n\t\t\tunique: true\n\t\t},\n\t\tvalue: {\n\t\t\ttype: 'string',\n\t\t\trequired: true\n\t\t},\n\t\tttl: {\n\t\t\t// object's time to live in miliseconds\n\t\t\ttype: Number\n\t\t},\n\t\ttouchedAt: {\n\t\t\ttype: Date,\n\t\t\trequired: true,\n\t\t\tdefault: new Date()\n\t\t}\n\t},\n\t{\n\t\tversionKey: false\n\t}\n);\n\nschema.post('save', function(doc) {\n\tcleanUp(this.constructor);\n});\n\nschema.pre('save', function(next) {\n\tthis.touchedAt = new Date();\n\tif (!this.ttl) this.ttl = DEFAULT_TTL;\n\treturn next();\n});\n\nschema.pre('update', function(next) {\n\tlet ttl = this.getUpdate().ttl || DEFAULT_TTL;\n\tthis.update({\n\t\ttouchedAt: new Date(),\n\t\tttl: ttl\n\t});\n\tnext();\n});\n\nexport default mongoose.model('Object', schema);\n\n/**\n * Implements https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\n * Method to remove the oldest value in collection\n * \n * If the amounts of models is greater than the permitted\n * search for the least reacently used record and remove it\n * \n * @param {Model} model \n */\nexport function cleanUp(model) {\n\tmodel.count(function(err, count) {\n\t\tif (count > MAX_INSTANCES) {\n\t\t\tmodel\n\t\t\t\t.deleteOne()\n\t\t\t\t.sort({ touchedAt: 1 })\n\t\t\t\t.exec(function(err2, found) {\n\t\t\t\t\tconsole.log('deleted', found);\n\t\t\t\t});\n\t\t}\n\t});\n}"]}